(ros::roseus-add-msgs "move_base_msgs")
(ros::roseus-add-srvs "elevator_operation")

(defun update-model (&key (robot-type "fetch"))
  (if (equal robot-type "fetch")
    (send *robot* :angle-vector (send *ri* :state :potentio-vector)))
  )

(defun look-at-target-with-head (coords-base-to-target &key (robot-type "fetch"))
  (if (equal robot-type "fetch")
    (progn
      (send *robot* :look-at-target coords-base-to-target)
      (send *ri* :angle-vector-raw (send *robot* :angle-vector) 500)))
  )

(defun send-move-base-goal (x y z qx qy qz qw frame-id &key (wait t))
  (if (not (boundp `*move-base-action-client*))
    (setq *move-base-action-client* (instance ros::simple-action-client :init "/move_base" move_base_msgs::MoveBaseAction))
    )
  (let (result (goal (instance move_base_msgs::MoveBaseGoal :init)))
    (send goal :target_pose :header :frame_id frame-id)
    (send goal :target_pose :pose :position :x x)
    (send goal :target_pose :pose :position :y y)
    (send goal :target_pose :pose :position :z z)
    (send goal :target_pose :pose :orientation :x qx)
    (send goal :target_pose :pose :orientation :y qy)
    (send goal :target_pose :pose :orientation :z qz)
    (send goal :target_pose :pose :orientation :w qw)
    (send *move-base-action-client* :send-goal goal)
    (if wait
      (progn
        (send *move-base-action-client* :wait-for-result)
        (setq result (send *move-base-action-client* :get-result))
        )))
  )

(defun rotate-base (theta &key (robot-type "fetch"))
  (ros::ros-warn "rotating base ~A radians" theta)
  (cond
    ((equal robot-type "fetch")
      (send *ri* :go-pos-unsafe-wait 0 0 (rad2deg theta)))
    ((equal robot-type "magni")
      (send-move-base-goal 0 0 0 0 0 (sin (/ theta 2)) (cos (/ theta 2)) "base_link" :wait t))
    (t
      (ros::ros-error "Unsupported robot type: ~A" robot-type))
    ))

(defun look-at-target-frame (target-frame-id &key (robot-type "fetch"))
  (ros::ros-warn "target-frame-id: ~A" target-frame-id)
  (let ((coords-base-to-target (send *tfl* :lookup-transform "base_link" target-frame-id (ros::time))))
    (update-model :robot-type robot-type)
    (ros::ros-info "coords-base-to-target: ~A" coords-base-to-target)
    (if (not coords-base-to-target)
      (return-from look-at-target nil)
      )
    (let* ((target-x (elt (send coords-base-to-target :pos) 0))
           (target-y (elt (send coords-base-to-target :pos) 1)))
      (rotate-base (atan target-y target-x) :robot-type robot-type)
      (update-model :robot-type robot-type)
      (setq coords-base-to-target (send *tfl* :lookup-transform "base_link" target-frame-id (ros::time)))
      (if (not coords-base-to-target)
        (return-from look-at-target nil)
        )
      (look-at-target-with-head coords-base-to-target :robot-type robot-type)
      )
    t))

(defun call-look-at-target (topic-name frame-id)
  (let ((req (instance elevator_operation::LookAtTargetRequest :init)))
    (send req :frame_id frame-id)
    (ros::service-call topic-name req t)
    ))
